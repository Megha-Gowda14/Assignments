                       Assignment Day-1
					   
					   

1. db.movies.insert([
	{
		title: "Fight Club",
		writer: "Chuck Palahniuko",
		year: 1999,
		actors: ["Brad Pitt", "Edward Norton"],
	},
	{
		title: "Pulp Fiction",
		writer: "Quentin Tarantino",
		year: 1994,
		actors: ["John Travolta", "Uma Thurman"],
	},
	{
		title: "Inglorious Basterds",
		writer: "Quentin Tarantino",
		year: 2009,
		actors: ["Brad Pitt", "Diane Kruger", "Eli Roth"],
	},
	{
		title: "The Hobbit: An Unexpected Journey",
		writer: "J.R.R. Tolkein",
		year: 2012,
		franchise: "The Hobbit",
	},
	{
		title: "The Hobbit: An Desolation of Smaug",
		writer: "J.R.R. Tolkein",
		year: 2013,
		franchise: "The Hobbit",
	},
	{
		title: "The Hobbit: The Battle of the Five Armies",
		writer: "J.R.R. Tolkein",
		year: 2012,
		franchise: "The Hobbit",
		synopsis:
			"Bilbo and Company are forced to engage in a war against 
			an array of combatants and keep the Lonely Mountain from 
			falling into the hands of a rising darkness.",
	},
	{ title: "Pee Wee Herman Big Adventure" },
	{ title: "Avtar" },
]);




2. db.movies.find({"writer" : "Quentin Tarantino"}) 
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c4"),
    "title" : "Pulp Fiction",
    "writer" : "Quentin Tarantino",
    "year" : 1994.0,
    "actors" : [ 
        "John Travolta", 
        "Uma Thurman"
    ]
}

/* 2 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c5"),
    "title" : "Inglorious Basterds",
    "writer" : "Quentin Tarantino",
    "year" : 2009.0,
    "actors" : [ 
        "Brad Pitt", 
        "Diane Kruger", 
        "Eli Roth"
    ]
}



3.db.movies.find({"actors":"Brad Pitt"})
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c3"),
    "title" : "Fight Club",
    "writer" : "Chuck Palahniuko",
    "year" : 1999.0,
    "actors" : [ 
        "Brad Pitt", 
        "Edward Norton"
    ]
}

/* 2 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c5"),
    "title" : "Inglorious Basterds",
    "writer" : "Quentin Tarantino",
    "year" : 2009.0,
    "actors" : [ 
        "Brad Pitt", 
        "Diane Kruger", 
        "Eli Roth"
    ]
}



4.db.movies.find({"franchise": "The Hobbit"})
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c6"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit"
}

/* 2 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c7"),
    "title" : "The Hobbit: An Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : 2013.0,
    "franchise" : "The Hobbit"
}

/* 3 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c8"),
    "title" : "The Hobbit: The Battle of the Five Armies",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit",
    "synopsis" : "Bilbo and Company are forced to engage in a war against 
	an array of combatants and keep the Lonely Mountain from falling into
	the hands of a rising darkness."
}




5.db.movies.find({"year": {$lt : 2000}})
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c3"),
    "title" : "Fight Club",
    "writer" : "Chuck Palahniuko",
    "year" : 1999.0,
    "actors" : [ 
        "Brad Pitt", 
        "Edward Norton"
    ]
}

/* 2 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c4"),
    "title" : "Pulp Fiction",
    "writer" : "Quentin Tarantino",
    "year" : 1994.0,
    "actors" : [ 
        "John Travolta", 
        "Uma Thurman"
    ]
}




6.db.movies.find({"year": {$gt : 2000}})
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c5"),
    "title" : "Inglorious Basterds",
    "writer" : "Quentin Tarantino",
    "year" : 2009.0,
    "actors" : [ 
        "Brad Pitt", 
        "Diane Kruger", 
        "Eli Roth"
    ]
}

/* 2 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c6"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit"
}

/* 3 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c7"),
    "title" : "The Hobbit: An Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : 2013.0,
    "franchise" : "The Hobbit"
}

/* 4 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c8"),
    "title" : "The Hobbit: The Battle of the Five Armies",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit",
    "synopsis" : "Bilbo and Company are forced to engage in a war 
	against an array of combatants and keep the Lonely Mountain from
	falling into the hands of a rising darkness."
}





Update Documents:

1.db.movies.update(
    { title: "The Hobbit: An Unexpected Journey" },
    {
        $set: {
            synopsis:
                "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely
				Mountain with a spirited group of dwarves to reclaim their 
				mountain home - and the gold within it - from the dragon Smaug.",
        }
    }
)



2.db.movies.update(
    { title: "The Hobbit: The Desolation of Smaug" },
    {
        $set: {
            synopsis:
                "The dwarves, along with Bilbo Baggins and Gandalf the Grey,
				continue their quest to reclaim Erebor, their homeland, from Smaug.
				Bilbo Baggins is in possession of a mysterious and magical ring.",
        }
    }
)



3.db.movies.update(
    { title: "Pulp Fiction" },
    { $push: { actors: "Samuel L. Jackson" } }
)



Text Search

1.db.movies.find({ synopsis: /.Bilbo./ })
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c6"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit",
    "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}


2.db.movies.find({ synopsis: /.Gandalf./ })



3.db.movies.find({
    $and: [{ synopsis: /Bilbo/ }, { synopsis: { $not: /Gandalf/ } }],
})
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c6"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit",
    "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}

/* 2 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c8"),
    "title" : "The Hobbit: The Battle of the Five Armies",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit",
    "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}



4.db.movies.find({ $or: [{ synopsis: /dwarves/ }, { synopsis: /hobbit/ }] })
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c6"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit",
    "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}



5.db.movies.find({ $and: [{ synopsis: /gold/ }, { synopsis: /dragon/ }] })
/* 1 */
{
    "_id" : ObjectId("607696cc02526e8150beb5c6"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : 2012.0,
    "franchise" : "The Hobbit",
    "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}


Delete Documents:

1.db.movies.deleteOne({ title: "Pee Wee Herman Big Adventure" })
/* 1 */
{
    "acknowledged" : true,
    "deletedCount" : 1.0
}


2.db.movies.remove({ title: "Avtar" })




Relationships:

users collection:

1.db.users.insert([
    {
        username: "GoodGuyGreg",
        first_name: "Good Guy",
        last_name: "Greg",
    },
    {
        username: "ScumbagSteve",
        full_name: {
            first: "Scumbag",
            last: "Steve",
        },
    },
])

Posts collection:

1.db.posts.insert([
    {
        _id: 1,
        username: "GoodGuyGreg",
        title: "Passes out at party",
        body: "Wakes up early and cleans house",
    },

    {
        _id: 2,
        username: "GoodGuyGreg",
        title: "Steals your identity",
        body: "Raises your credit score",
    },

    {
        _id: 3,
        username: "GoodGuyGreg",
        title: "Reports a bug in your code",
        body: "Sends you a Pull Request",
    },

    {
        _id: 4,
        username: "ScumbagSteve",
        title: "Borrows something",
        body: "Sells it",
    },

    {
        _id: 5,
        username: "ScumbagSteve",
        title: "Borrows everything",
        body: "The end",
    },

    {
        _id: 6,
        username: "ScumbagSteve",
        title: "Forks your repo on github",
        body: "Sets to private",
    },
])


Comments Collection:

1.db.comments.insert([
    {
        username: "GoodGuyGreg",
        comment: "Hope you got a good deal!",
        post: 4,
    },
    {
        username: "GoodGuyGreg",
        comment: "What's mine is yours!",
        post: 5,
    },
    {
        username: "GoodGuyGreg",
        comment: "Don't violate the licensing agreement!",
        post: 6,
    },
    {
        username: "ScumbagSteve",
        comment: "It still isn't clean",
        post: 1,
    },
    {
        username: "ScumbagSteve",
        comment: "Denied your PR cause I found a hack",
        post: 3,
    },
])



Querying Related collections:

1.db.users.find()
/* 1 */
{
    "_id" : ObjectId("607735f6191fd8adc3542998"),
    "username" : "GoodGuyGreg",
    "first_name" : "Good Guy",
    "last_name" : "Greg"
}

/* 2 */
{
    "_id" : ObjectId("607735f6191fd8adc3542999"),
    "username" : "ScumbagSteve",
    "full_name" : {
        "first" : "Scumbag",
        "last" : "Steve"
    }
}


2.db.posts.find()
/* 1 */
{
    "_id" : 1.0,
    "username" : "GoodGuyGreg",
    "title" : "Passes out at party",
    "body" : "Wakes up early and cleans house"
}

/* 2 */
{
    "_id" : 2.0,
    "username" : "GoodGuyGreg",
    "title" : "Steals your identity",
    "body" : "Raises your credit score"
}

/* 3 */
{
    "_id" : 3.0,
    "username" : "GoodGuyGreg",
    "title" : "Reports a bug in your code",
    "body" : "Sends you a Pull Request"
}

/* 4 */
{
    "_id" : 4.0,
    "username" : "ScumbagSteve",
    "title" : "Borrows something",
    "body" : "Sells it"
}

/* 5 */
{
    "_id" : 5.0,
    "username" : "ScumbagSteve",
    "title" : "Borrows everything",
    "body" : "The end"
}

/* 6 */
{
    "_id" : 6.0,
    "username" : "ScumbagSteve",
    "title" : "Forks your repo on github",
    "body" : "Sets to private"
}


3.db.posts.find({ username: "GoodGuyGreg" })
/* 1 */
{
    "_id" : 1.0,
    "username" : "GoodGuyGreg",
    "title" : "Passes out at party",
    "body" : "Wakes up early and cleans house"
}

/* 2 */
{
    "_id" : 2.0,
    "username" : "GoodGuyGreg",
    "title" : "Steals your identity",
    "body" : "Raises your credit score"
}

/* 3 */
{
    "_id" : 3.0,
    "username" : "GoodGuyGreg",
    "title" : "Reports a bug in your code",
    "body" : "Sends you a Pull Request"
}


4.db.posts.find({ username: "ScumbagSteve" })
/* 1 */
{
    "_id" : 4.0,
    "username" : "ScumbagSteve",
    "title" : "Borrows something",
    "body" : "Sells it"
}

/* 2 */
{
    "_id" : 5.0,
    "username" : "ScumbagSteve",
    "title" : "Borrows everything",
    "body" : "The end"
}

/* 3 */
{
    "_id" : 6.0,
    "username" : "ScumbagSteve",
    "title" : "Forks your repo on github",
    "body" : "Sets to private"
}



5.db.comments.find()
/* 1 */
{
    "_id" : ObjectId("6077380f191fd8adc354299a"),
    "username" : "GoodGuyGreg",
    "comment" : "Hope you got a good deal!",
    "post" : 4.0
}

/* 2 */
{
    "_id" : ObjectId("6077380f191fd8adc354299b"),
    "username" : "GoodGuyGreg",
    "comment" : "What's mine is yours!",
    "post" : 5.0
}

/* 3 */
{
    "_id" : ObjectId("6077380f191fd8adc354299c"),
    "username" : "GoodGuyGreg",
    "comment" : "Don't violate the licensing agreement!",
    "post" : 6.0
}

/* 4 */
{
    "_id" : ObjectId("6077380f191fd8adc354299d"),
    "username" : "ScumbagSteve",
    "comment" : "It still isn't clean",
    "post" : 1.0
}

/* 5 */
{
    "_id" : ObjectId("6077380f191fd8adc354299e"),
    "username" : "ScumbagSteve",
    "comment" : "Denied your PR cause I found a hack",
    "post" : 3.0
}



6.db.comments.find({ username: "GoodGuyGreg" })
/* 1 */
{
    "_id" : ObjectId("6077380f191fd8adc354299a"),
    "username" : "GoodGuyGreg",
    "comment" : "Hope you got a good deal!",
    "post" : 4.0
}

/* 2 */
{
    "_id" : ObjectId("6077380f191fd8adc354299b"),
    "username" : "GoodGuyGreg",
    "comment" : "What's mine is yours!",
    "post" : 5.0
}

/* 3 */
{
    "_id" : ObjectId("6077380f191fd8adc354299c"),
    "username" : "GoodGuyGreg",
    "comment" : "Don't violate the licensing agreement!",
    "post" : 6.0
}


7.db.comments.find({ username: "ScumbagSteve" })
/* 1 */
{
    "_id" : ObjectId("6077380f191fd8adc354299d"),
    "username" : "ScumbagSteve",
    "comment" : "It still isn't clean",
    "post" : 1.0
}

/* 2 */
{
    "_id" : ObjectId("6077380f191fd8adc354299e"),
    "username" : "ScumbagSteve",
    "comment" : "Denied your PR cause I found a hack",
    "post" : 3.0
}



8.db.comments.find({
    post: db.posts.findOne({ title: "Reports a bug in your code" })._id,
})
/* 1 */
{
    "_id" : ObjectId("6077380f191fd8adc354299e"),
    "username" : "ScumbagSteve",
    "comment" : "Denied your PR cause I found a hack",
    "post" : 3.0
}






